// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Metrics_HeapMetrics_FullMethodName      = "/server.Metrics/HeapMetrics"
	Metrics_CPUMetrics_FullMethodName       = "/server.Metrics/CPUMetrics"
	Metrics_AllocsMetrics_FullMethodName    = "/server.Metrics/AllocsMetrics"
	Metrics_GoroutineMetrics_FullMethodName = "/server.Metrics/GoroutineMetrics"
)

// MetricsClient is the client API for Metrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsClient interface {
	HeapMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error)
	CPUMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error)
	AllocsMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error)
	GoroutineMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error)
}

type metricsClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsClient(cc grpc.ClientConnInterface) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) HeapMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoMetricsResponse)
	err := c.cc.Invoke(ctx, Metrics_HeapMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) CPUMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoMetricsResponse)
	err := c.cc.Invoke(ctx, Metrics_CPUMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) AllocsMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoMetricsResponse)
	err := c.cc.Invoke(ctx, Metrics_AllocsMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsClient) GoroutineMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoMetricsResponse)
	err := c.cc.Invoke(ctx, Metrics_GoroutineMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServer is the server API for Metrics service.
// All implementations must embed UnimplementedMetricsServer
// for forward compatibility.
type MetricsServer interface {
	HeapMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error)
	CPUMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error)
	AllocsMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error)
	GoroutineMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error)
	mustEmbedUnimplementedMetricsServer()
}

// UnimplementedMetricsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricsServer struct{}

func (UnimplementedMetricsServer) HeapMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeapMetrics not implemented")
}
func (UnimplementedMetricsServer) CPUMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CPUMetrics not implemented")
}
func (UnimplementedMetricsServer) AllocsMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocsMetrics not implemented")
}
func (UnimplementedMetricsServer) GoroutineMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoroutineMetrics not implemented")
}
func (UnimplementedMetricsServer) mustEmbedUnimplementedMetricsServer() {}
func (UnimplementedMetricsServer) testEmbeddedByValue()                 {}

// UnsafeMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServer will
// result in compilation errors.
type UnsafeMetricsServer interface {
	mustEmbedUnimplementedMetricsServer()
}

func RegisterMetricsServer(s grpc.ServiceRegistrar, srv MetricsServer) {
	// If the following call pancis, it indicates UnimplementedMetricsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Metrics_ServiceDesc, srv)
}

func _Metrics_HeapMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).HeapMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_HeapMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).HeapMetrics(ctx, req.(*GoMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_CPUMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).CPUMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_CPUMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).CPUMetrics(ctx, req.(*GoMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_AllocsMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).AllocsMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_AllocsMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).AllocsMetrics(ctx, req.(*GoMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metrics_GoroutineMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServer).GoroutineMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metrics_GoroutineMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServer).GoroutineMetrics(ctx, req.(*GoMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Metrics_ServiceDesc is the grpc.ServiceDesc for Metrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeapMetrics",
			Handler:    _Metrics_HeapMetrics_Handler,
		},
		{
			MethodName: "CPUMetrics",
			Handler:    _Metrics_CPUMetrics_Handler,
		},
		{
			MethodName: "AllocsMetrics",
			Handler:    _Metrics_AllocsMetrics_Handler,
		},
		{
			MethodName: "GoroutineMetrics",
			Handler:    _Metrics_GoroutineMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	MockMetrics_HeapMetrics_FullMethodName      = "/server.MockMetrics/HeapMetrics"
	MockMetrics_CPUMetrics_FullMethodName       = "/server.MockMetrics/CPUMetrics"
	MockMetrics_AllocsMetrics_FullMethodName    = "/server.MockMetrics/AllocsMetrics"
	MockMetrics_GoroutineMetrics_FullMethodName = "/server.MockMetrics/GoroutineMetrics"
)

// MockMetricsClient is the client API for MockMetrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MockMetrics returns mock data instead of real data to save development time
type MockMetricsClient interface {
	HeapMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error)
	CPUMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error)
	AllocsMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error)
	GoroutineMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error)
}

type mockMetricsClient struct {
	cc grpc.ClientConnInterface
}

func NewMockMetricsClient(cc grpc.ClientConnInterface) MockMetricsClient {
	return &mockMetricsClient{cc}
}

func (c *mockMetricsClient) HeapMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoMetricsResponse)
	err := c.cc.Invoke(ctx, MockMetrics_HeapMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockMetricsClient) CPUMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoMetricsResponse)
	err := c.cc.Invoke(ctx, MockMetrics_CPUMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockMetricsClient) AllocsMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoMetricsResponse)
	err := c.cc.Invoke(ctx, MockMetrics_AllocsMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockMetricsClient) GoroutineMetrics(ctx context.Context, in *GoMetricsRequest, opts ...grpc.CallOption) (*GoMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GoMetricsResponse)
	err := c.cc.Invoke(ctx, MockMetrics_GoroutineMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockMetricsServer is the server API for MockMetrics service.
// All implementations must embed UnimplementedMockMetricsServer
// for forward compatibility.
//
// MockMetrics returns mock data instead of real data to save development time
type MockMetricsServer interface {
	HeapMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error)
	CPUMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error)
	AllocsMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error)
	GoroutineMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error)
	mustEmbedUnimplementedMockMetricsServer()
}

// UnimplementedMockMetricsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMockMetricsServer struct{}

func (UnimplementedMockMetricsServer) HeapMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeapMetrics not implemented")
}
func (UnimplementedMockMetricsServer) CPUMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CPUMetrics not implemented")
}
func (UnimplementedMockMetricsServer) AllocsMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocsMetrics not implemented")
}
func (UnimplementedMockMetricsServer) GoroutineMetrics(context.Context, *GoMetricsRequest) (*GoMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoroutineMetrics not implemented")
}
func (UnimplementedMockMetricsServer) mustEmbedUnimplementedMockMetricsServer() {}
func (UnimplementedMockMetricsServer) testEmbeddedByValue()                     {}

// UnsafeMockMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MockMetricsServer will
// result in compilation errors.
type UnsafeMockMetricsServer interface {
	mustEmbedUnimplementedMockMetricsServer()
}

func RegisterMockMetricsServer(s grpc.ServiceRegistrar, srv MockMetricsServer) {
	// If the following call pancis, it indicates UnimplementedMockMetricsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MockMetrics_ServiceDesc, srv)
}

func _MockMetrics_HeapMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockMetricsServer).HeapMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockMetrics_HeapMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockMetricsServer).HeapMetrics(ctx, req.(*GoMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockMetrics_CPUMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockMetricsServer).CPUMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockMetrics_CPUMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockMetricsServer).CPUMetrics(ctx, req.(*GoMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockMetrics_AllocsMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockMetricsServer).AllocsMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockMetrics_AllocsMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockMetricsServer).AllocsMetrics(ctx, req.(*GoMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockMetrics_GoroutineMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockMetricsServer).GoroutineMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockMetrics_GoroutineMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockMetricsServer).GoroutineMetrics(ctx, req.(*GoMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MockMetrics_ServiceDesc is the grpc.ServiceDesc for MockMetrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MockMetrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.MockMetrics",
	HandlerType: (*MockMetricsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeapMetrics",
			Handler:    _MockMetrics_HeapMetrics_Handler,
		},
		{
			MethodName: "CPUMetrics",
			Handler:    _MockMetrics_CPUMetrics_Handler,
		},
		{
			MethodName: "AllocsMetrics",
			Handler:    _MockMetrics_AllocsMetrics_Handler,
		},
		{
			MethodName: "GoroutineMetrics",
			Handler:    _MockMetrics_GoroutineMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	General_DetectURL_FullMethodName = "/server.General/DetectURL"
)

// GeneralClient is the client API for General service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneralClient interface {
	DetectURL(ctx context.Context, in *DetectURLRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DetectURLResponse], error)
}

type generalClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneralClient(cc grpc.ClientConnInterface) GeneralClient {
	return &generalClient{cc}
}

func (c *generalClient) DetectURL(ctx context.Context, in *DetectURLRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DetectURLResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &General_ServiceDesc.Streams[0], General_DetectURL_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DetectURLRequest, DetectURLResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type General_DetectURLClient = grpc.ServerStreamingClient[DetectURLResponse]

// GeneralServer is the server API for General service.
// All implementations must embed UnimplementedGeneralServer
// for forward compatibility.
type GeneralServer interface {
	DetectURL(*DetectURLRequest, grpc.ServerStreamingServer[DetectURLResponse]) error
	mustEmbedUnimplementedGeneralServer()
}

// UnimplementedGeneralServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeneralServer struct{}

func (UnimplementedGeneralServer) DetectURL(*DetectURLRequest, grpc.ServerStreamingServer[DetectURLResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DetectURL not implemented")
}
func (UnimplementedGeneralServer) mustEmbedUnimplementedGeneralServer() {}
func (UnimplementedGeneralServer) testEmbeddedByValue()                 {}

// UnsafeGeneralServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneralServer will
// result in compilation errors.
type UnsafeGeneralServer interface {
	mustEmbedUnimplementedGeneralServer()
}

func RegisterGeneralServer(s grpc.ServiceRegistrar, srv GeneralServer) {
	// If the following call pancis, it indicates UnimplementedGeneralServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&General_ServiceDesc, srv)
}

func _General_DetectURL_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DetectURLRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeneralServer).DetectURL(m, &grpc.GenericServerStream[DetectURLRequest, DetectURLResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type General_DetectURLServer = grpc.ServerStreamingServer[DetectURLResponse]

// General_ServiceDesc is the grpc.ServiceDesc for General service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var General_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.General",
	HandlerType: (*GeneralServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DetectURL",
			Handler:       _General_DetectURL_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
